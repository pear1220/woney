1. 2차원 배열

/*
 	=== 2차원 배열 ===
 */


package my.day8;


public class ArrayTest4 {

	public static void main(String[] args) {
		int[][] point = new int[4][3];
		point[0][0] = 10;
		point[0][1] = 20;
		point[0][2] = 30;
		
		point[1][0] = 40;
		point[1][1] = 50;
		//point[1][2] = 60;
		
		point[2][0] = 70;
		point[2][1] = 80;
		point[2][2] = 90;
		
		point[3][0] = 100;
		point[3][1] = 110;
		point[3][2] = 120;
		
		System.out.println("point.lenght => " + point.length); 
		//point.length =>4 행의 개수가 나옴
		
		System.out.println("point[0].lenght => " + point[0].length);
		//point[0].lenght => 3
		
		System.out.println("point[0].lenght => " + point[1].length);
		//point[1].lenght => 3 //열의 개수

		System.out.println("\n========================\n");
		
		for(int j=0; j<point[0].length; j++) {
			String comma = (j < point[0].length-1)?"," : "\n";
			System.out.print(point[0][j] + comma);
		}
		
		for(int j=0; j<point[0].length; j++) {
			String comma = (j < point[1].length-1)?"," : "\n";
			System.out.print(point[1][j] + comma);
		}
		
		for(int i =0; i<point.length;i++) { // 학생 수
			for(int j=0; j<point[i].length;j++) { //학생의 과목수
				String comma = (j<point[i].length-1)? ",":"\n";
				System.out.print(point[i][j]+comma);
			}
		}
		/*
		 	10,20,30
			40,50,0
			10,20,30
			40,50,0
			70,80,90
			100,110,120
		 
		 */
		
		System.out.println("\n========================\n");
		
		int[][] val = new int[4][];
		
		/*
		val[0][0] = 10;
		val[0][1] = 20;
		val[0][2] = 30;
		
		val[1][0] = 40;
		val[1][1] = 50;
		//val[1][2] = 60;
		
		val[2][0] = 70;
		val[2][1] = 80;
		val[2][2] = 90;
		
		val[3][0] = 100;
		val[3][1] = 110;
		val[3][2] = 120;
		
		Exception in thread "main" java.lang.NullPointerException at my.day8.ArrayTest4.main(ArrayTest4.java:68)
		열에대한 배열의 크기를 설정하지 않았으므로 아래와 같이 열에 대한 크기를 설정해주어야만 데이터 값(점수)을 입력할 수 있다.
		System.out.println("val.lenght => "+ val.length);
		Exception in thread "main" java.lang.NullPointerException 
		*/
		
		val[0]= new int[3];
		val[1]= new int[2]; //2니깐 1행의 3열은 존재하지 않는다
		val[2]= new int[3];
		val[3]= new int[3];
		
		val[0][0] = 10;
		val[0][1] = 20;
		val[0][2] = 30;
		
		val[1][0] = 40;
		val[1][1] = 50;
		//val[1][2] = 60; <=입력이 불가능함!!
		
		val[2][0] = 70;
		val[2][1] = 80;
		val[2][2] = 90;
		
		val[3][0] = 100;
		val[3][1] = 110;
		val[3][2] = 120;
		
		System.out.println("val.lenght => "+ val.length);
		//val.lenght => 4
		
		System.out.println("val[0].lenght => "+ val[0].length);
		//val[0].lenght => 3
		
		System.out.println("val[1].lenght => "+ val[1].length);
		//val[1].lenght => 2
		
		System.out.println("\n");
		
		for(int i =0; i<val.length;i++) { // 학생 수
			for(int j=0; j<val[i].length;j++) { //학생의 과목수
				String comma = (j<val[i].length-1)? ",":"\n";
				System.out.print(val[i][j]+comma);
			}
		}
		
		System.out.println("\n##########################\n");
		
		int[][] jumsu = {{10,20,30}
						,{40,50}
						,{60,70,90}
						,{100,110,120}};
		
		System.out.println("jumsu.lenght => "+ jumsu.length);
		//jumsu.lenght => 4
		
		System.out.println("jumsu[0].lenght => "+ jumsu[0].length);
		//jumsu[0].lenght => 3
		
		System.out.println("jumsu[1].lenght => "+ jumsu[1].length);
		//jumsu[1].lenght => 2
		
		
		System.out.println("\n##########################\n");
		for(int i =0; i<jumsu.length;i++) { // 학생 수
			for(int j=0; j<jumsu[i].length;j++) { //학생의 과목수
				String comma = (j<jumsu[i].length-1)? ",":"\n";
				System.out.print(jumsu[i][j]+comma);
			}
		}
		
		/*
		 	10,20,30
			40,50
			60,70,90
			100,110,120
		 */
		
		System.out.println("\n##########################\n");
		
		String[] strArr = {"이순신","김유신","유관순","신사임당"};
		
		Student[] studentArr = {new Student("khooo1","한석규",91,92,93)//한석규라는 객체 한개들이 모여 studentArr 배열 에는 3명의 학생의 정보가 들어가게 된다.
								,new Student("khooo2","두석규",81,82,83)
								,new Student("khooo3","세석규",71,72,73)
								,new Student("khooo4","네석규",81,100,92)}; //student 메소드를 가지고 포문을 이용하여 평균 학점을 구한다.
		
		for(int i = 0; i<studentArr.length;i++) {
			studentArr[i].execute();
		}
		
		
		
		System.out.println("\n=============================\n");
		// student 배열 studentArr에 저장된 데이터 중 학점이 "A" 인 학생만
		//아래와 같이 나오도록 하세요.
		/*
		====================
		 성명		평균점수	학점
		====================
		한석규	92.0	A
		네석규	91.0	A
		*/
		System.out.println("====================");
		System.out.println("성명	평균	학점");
		System.out.println("====================");
		int flag = 0;
		for(int i = 0; i<studentArr.length;i++) {
			switch (studentArr[i].jum()) {
			case "A":
				flag = 1;
				
				System.out.println( studentArr[i].name+ "\t" +studentArr[i].avg()+"\t" +studentArr[i].jum()+"\n");
				break;

			
			}
			if(flag == 0) {
				System.out.println(">>데이터가 없습니다.");
			}
		}// end of for()============================
		
		// ===== >>>> 배열의 복사 <<< =====
		/*
		 	배열은 한번 생성하면 그 크기를 변경할 수 없기 때문에 
		 	더 많은 저장공간이 필요하다면 현재 사용중인 배열보다 더 큰 배열을 새로 만들고
		 	이전 배열로 부터 내용을 복사해야 한다.
		 	배열간의 내용을 복사하려면 for문을 사용하거나
		 	system 클래스의 arraycopy() 메소드를 사용하면 된다.
		 */
	
		Student[] newstudentArr = new Student[studentArr.length+2]; //이전 4에서 2개가 늘어난 6개의 배열 생성
		
		for(int i=0; i<studentArr.length;i++) { //기존에 있는 배열에 데이터를 newstudentArr로 옮긴다.
			newstudentArr[i] = studentArr[i];
		}
		
		newstudentArr[4] =new Student("khooo5","오석규",71,81,91);
		newstudentArr[5] =new Student("khooo6","육석규",51,61,71);
		
		flag = 0;
		for(int i = 0; i<newstudentArr.length;i++) {
			newstudentArr[i].execute();
		}
		/*
		  Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 4
		  배열의 인덱스 4에서 초과했다라는 오류메시지.
		 */
		System.out.println("\n\n");
		
		Student[] newstudentArr2 = new Student[10];
		newstudentArr2[0] = new Student("ss001","일순신",10,20,30);
		newstudentArr2[1] = new Student("ss002","이순신",100,100,100);
		
		// 새롭게 생성된 배열의 저장 개수
		int cnt = 0;
		for(int i=0; i<newstudentArr2.length;i++) {
			if(newstudentArr2[i] != null) {
				cnt++;
			}
		}//end of for()-------------------------
		System.out.println("cnt => "+ cnt);
		
		//기존 배열의 전부를 newstudentArr2에 생성된 저장된 데이터 뒤에 저장해라
		for(int i=0; i<newstudentArr.length ; i++) {
			newstudentArr2[cnt+i] = newstudentArr[i];   
				
		}//end of for() ------------------------
		
		for(int i=0; i<newstudentArr2.length;i++) { 
			if(newstudentArr2[i] != null) {
				System.out.println(newstudentArr2[i].name);
			} 
		}//end of for()-------------------------
		System.out.println("\n$$$$$$$$$$$$$$$$$$$$\n");
		
		System.arraycopy(newstudentArr, 0, newstudentArr2, 0, newstudentArr.length);
		//기존 저장된 배열,복사할 배열 주소,새로운 배열,새로운 배열의 위치에 붙여넣기,기존저장된 배열의 마지막 위치까지 복사
		//새로운 배열의 위치에 붙여넣기 위치에 0이 들어갈 경우 newstudentArr2 배열에 담긴 데이터는 사라진다
	
		/* 
		 	System.arraycopy(src, srcPos, dest, destPos, length);
		 	==> 배열 src의 내용을 새배열 dest 로 복사하는데,
		 	복사할 내용은 배열 src의 인덱스 srcPos의 위치부터 시작해서
		 	length 만큼을 새배열 dest의 인덱스 destPos인 위치에 복사한다.
		 	이때 복사되어지는 새배열 dest 의 위치가 적절하지 못하여
		 	복사하려는 내용 (src)보다 여유공간이 적으면 ArrayIndexOutOfBoundsException 이 발생한다.
		 */
	
		for(int i=0; i<newstudentArr2.length;i++) { //기존에 있는 배열에 데이터를 newstudentArr로 옮긴다.
			if(newstudentArr2[i] != null) {
				System.out.println("널아님[i]=> ["+ i + "]");
			} else {
				System.out.println("널임[i]=> ["+ i + "]");
			}
		}
		
		System.out.println("\n\n");
		
		for(int i=0; i<newstudentArr2.length;i++) { 
			if(newstudentArr2[i] != null) {
				System.out.println(newstudentArr2[i].name);
			} 
		}
	}//end of main()--------------------------------
	
	

}//end of class ArrayTest4-------------------------


-------------------------------------------------------------------------------------------------------------

Student 클래스

package my.day8;

import java.util.Scanner;

import my.day8.Student;

public class Student {

	String number,name;
	int kor, eng, math;
	
	
	
	public Student(String number,String name, int kor, int eng,int math){
		this.number = number;
		this.name = name;
		this.kor = kor;
		this.eng = eng;
		this.math = math;
		
	}
	
	public void execute() {

		String result = "====결과 ====\n" +
				 "학번 : " + number +
				 "\n성명 : " + name +
				 "\n국어 : " + kor +
				 "\n영어 : " + eng +
				 "\n수학 : " + math +
				 "\n총점 : " + sum()+
				 "\n평균 : " + avg()+
				 "\n학점 : " + jum();
		
		System.out.println(result);
	}
	
	public int sum() {
		return kor+eng+math;	
	}
	
	public double avg() {
		int result = sum();
		double result1 = (double)result/3;
		
		return Math.round(result1*10)/10.0;
	}
	
	public String jum() {
		int avg1 = (int)avg();
		String a = "";
		if (avg1 >=90) {
			a = "A";
		} else if( avg1>=80) {
			a = "B";
		} else if( avg1>=70){
			a = "C";
		} else if( avg1>=60){
			a = "D";
		} else {
			a = "F";
		}
		
		return a;		
	}//end of jum()--------------------------------------
	
	
	//파라미터로 학생을 받아서 학점이 'F'인 학생들의 정보를 출력
	public static void failStudent(Student[] studentArr) {
		
		for(int i=0;i<studentArr.length;i++) {
			if(studentArr[i].jum().equals("F")) {
				studentArr[i].execute();
			}	
			
		}//end of for()------------------------
		
	}//end of failStudent()--------------------

	//파라미터로 학생을 받아서 학점이 'F'인 학생들만 이름을 변경하여
	//학생들을 리턴시켜주는 메소드임(변경된 새로운 학생들의 정보를 돌려주는것)
	public static Student[] veryGoodStudent(Student[] studentArr) {
		
		for(int i=0;i<studentArr.length;i++) {
			if(studentArr[i].jum().equals("A")) {
				studentArr[i].name += "(참잘했어요^^)";
			}
			
		}//end of for()------------------------
		
		
		
		return studentArr;
	}//end of static Student[] veryGoodStudent(Student[] studentArr)

}



=======================================================================================================

2. F학점인사람과 A학점인 사람을 출력해라 

package my.day8;

public class ArrayTest5 {

	public static void main(String[] args) {

		Student[] studentArr = {new Student("khooo1","한석규",91,92,93)//한석규라는 객체 한개들이 모여 studentArr 배열 에는 3명의 학생의 정보가 들어가게 된다.
								,new Student("khooo2","두석규",81,82,83)
								,new Student("khooo3","세석규",50,60,40)
								,new Student("khooo4","네석규",88,77,66)
								,new Student("khooo5","오석규",60,40,30)
								,new Student("khooo6","육석규",81,100,92)}; //student 메소드를 가지고 포문을 이용하여 평균 학점을 구한다.
		
		Student.failStudent(studentArr);
		
		System.out.println("\n===================\n");
		
		Student[] afterstudentArr = Student.veryGoodStudent(studentArr); //변경되어진 학생을 배열로 다시 집어넣겠다.
		
		for(int i=0;i<afterstudentArr.length;i++) {
			afterstudentArr[i].execute();
		}
		
		
	}//end of main()-------------------------------------------

}

=========================================================================================================

3. 시험 문제

package my.day8.quiz;

public class Exam {

	public static void main(String[] args) {
		

		//2차원 배열 int array 4명, 4과목
		//int total	정수형
		//double avg 실수형
		int total = 0;
		double avg =0;
		int[][] array = {{96,85,71,95}
						,{75,54,83,45}
						,{100,91,85,98}
						,{85,89,90,52}};
		
		for(int i = 0; i<array.length;i++) {
			for(int j=0;j<array[i].length;j++) {
				total+=array[i][j]; 
			}
		}
		avg = (double)total/(array.length*array[0].length);
		System.out.println("합계 : " + total);
		System.out.println("평균 : " + Math.round(avg*1000)/1000.0);

	}//end of main()------------------------

}
/*
 	합계:
 	평균:
*/

====================================================================================================

4. 로또

/*
 		1 2 3 4 5 6 7 8 9 10 11 ......... 43 44 45
  idx 	0 1 2 3 4 5 6 7 8 9 10 11 ......... 43 44 44
 (난수)

 	int	| 5 | 10 | 23 | 40 | 7 | 11 | // idx =0부터 시작 하면서 temp랑 비교하는데 temp값이 0일경우 같기 때문에 다시 뽑기 때문에 절대 나올수 없는 값으로 초기화 해준다.
 	   	 ---  ---  --   --   --  --
 	첫번째 공 : 5
 	두번째 공 : 10
 	세번째 공 : 5 다시 10 다시 23
 	네번째 공 : 40
 	다섯번째 공 : 23 다시 7
 	여섯번째 공 : 5 다시 10 다시 11
 	
 	5,10,23,40,7,11
 	
 */

package my.day8;

import java.util.Random;

import my.util.MyUtil;

public class Lotto {

	public static void main(String[] args) {
		
		Random rnd = new Random();
		
		int[] ball = new int[45];
		int idx = 0;
		int[] temp = new int[5];
		String comma = "";
		
		for(int i=0; i<ball.length;i++) {
			ball[i] = i+1; //초기치로 1번공~45번 공까지 준비함
		}
		
		for(int i=0;i<temp.length;i++) {
			temp[i]=-1;
			//공을 꺼내어 오면 꺼내온 공의 방번호(idx번호)를 담아두는 곳으로 사용
			//꺼내온 공의 방번호(idx번호)가 0값이 들어 올수 있으므로
			//초기치는 방번호(idx 번호)로 사용하지 않는 -1로 모두(5개) 초기화함
		}
		
		outer:
		for(int i=0; i<6;i++) { //공을 꺼내는 작업을 6번 반복
			//int rndnum = rnd.nextInt(max-min+1)+min;
			idx =rnd.nextInt(44-0+1)+0;//0~44까지의 난수를 발생
			
			for(int j=0;j<temp.length;j++) {
				if(temp[j] == idx) {
					i--; // 이미 뽑은 방번호를 또뽑았다면 outer로 올라가는 데 이때 i++된것을 다시 뽑기 위해서 i--로 하여 다시 뽑을 기회를 부여한다.
					continue outer;
				}
					
			}//end of 내부 for-------------------
			
			comma = (i<5)?",":"\n";
			System.out.print(ball[idx] + comma);
			
			if(i<5) {
			temp[i] =idx;
			//temp[0] <== 0
			//temp[1] <== 3
			//temp[2] <== 10
			//temp[3] <== 22
			//temp[4] <== 5

			
			}// 출력은 1,4,11,23,6
			
		}//end of 외부 for-----------------------
		System.out.println(">>> 1등 로또 담첨번호 입니다.");

	}//end of main()---------------------

}

====================================================================================================

5. 객체지향


 	=== *** 객체지향 프로그래밍(Object Oriented Programming)이란? *** ====
 	
 	※ OOP의 4가지 특징
 	  --> 1. 상속성
 	  --> 2. 추상화
 	  --> 3. 캡슐화
 	  --> 4. 다형성
 	  
 	 	부동산 관리 어플리케이션 프로그래밍 제작시 필요한 요소(부품)를 생각해보자
 	 	아주 다양하고, 많은 요소들이 필요할 것이다.
 	 	
 	 	예를 들어, 
 	 	집, 매도자, 매수자, 중개인..... 등등 많이 있다.
 	 	이러한 요소(부품)들이 바로 객체(object)인데 이 객체를 만드는 설계도면이 클래스이다.
 	 	
 	 	 위와(부동산 관리 어플리케이션 프로그래밍 제작) 같이 현실세계에 존재하는 
 	 	 다양한 객체들을 각각 하나하나 추상화 시켜서 클래스로 옮기는 것을 
 	 	 객체지향 프로그래밍(Object Oriented Programming)이라고 한다.
 	 	 
 	 	 여기서 추상화란?
 	 	 ==> 일반적인 의미의 추상화(Abstraction)란?
 	 	 	-- 어떤 물체(object)에서 주된 특징을 부각시켜 표현하고,
 	 	 		나머지 부분은 과감하게 생략하는 것을 말한다.
 	 	 추상화의 반대는 아주 시시콜콜한건(세세한것)까지 전부 몽땅 다 묘사하는 것을
 	 	 말하는데 이것은 정밀화 라고 말한다.
 	 	 그래서, 추상화라는 것은 객체의 아주 세세한 모든것들을 속성(property)으로 지정하는 것이 아니라,
 	 	 프로그래밍에서 필요한 부분만 속성(property)으로 뽑아내는 것을 추상화라고 한다.
 	 	 
 	 	※객체지향 프로그래밍(Object Oriented Programming)에서 사용되는 추상화도 이와 비슷하다. 
 	 	어떤 하나의 물체를 대표하는 속성(명사, 멤버변수)과 기능(동사, 메소드)을 
 	 	추출해는것을 OOP 프로그래밍에서는 추상화라고 한다.
 	 	
 	 	예: > DB에서 테이블명 	==> 컬럼, 컬럼, 컬럼.... (행)
 	 			employees	==> 사원번호, 사원명, 주민번호, 입사일, 급여... (사원)
 	 			
 	 		OOP 에서는 클래스명 	==> 멤버변수(명사, 컬럼명에 해당), 메소드(동사, 함수에 해당)
 	 		실제 DB에서 조회(select)해온 직원의 정보를 프로그래밍에서 다루고자 한다면
 	 		직원의 정보를 담을 변수가 필요하다.
 	 		이러한 직원의 정보를 담을 부품(객체변수)이 필요한데 이것이 바로 객체(Object)이다.
 	 		직원 정보를 담을 부품 == 객체(Object)
 	 	 
 

