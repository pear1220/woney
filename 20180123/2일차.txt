1. 1일차

// 1줄 주석문

/*
	여러줄 
	주석문
*/

/**
	문서화 주석
	==> javadoc를 이용해서 API 문서를 만들때 사용한다.
*/

// ==== *** CLASS(클래스)의 구조 *** ====
/*
CLASS(클래스)는 어떠한 어플리케이션 제작시 필요한 설계도면 이라고 생각하자.
	
	1. 패키지 선언문
	   ==> 패키지랑 클래스가 저장되어진 디렉터리 경로라고 보면된다.

	   package 패키지명;		==> 이때 패키지명은 반드시 소문자로 시작해야 한다

	예 > packge my.com;

	2.IMPORT 문

	예 > import 패키지명.클래스명;
		import java.lang.String;
		import java.lang.System;
		import java.lang.*;
	사이트 : https://docs.oracle.com/javase/8/docs/api/index.html

	3. 클래스 선언문

	4. 컴파일하기

	5. 실행하기
*/
//import java.lang.String;
//import java.lang.System;

//import java.lang.*;  .* lang안에 있는 패키지를 전부 쓰겠다라는 뜻 lang은 빈번하게 사용하기 때문에 따로 import를 안해도 import하게 되어진다.

import java.util.Date;

public class HELLO // 클래스명과 파일 저장명은 동일해야된다.
{
	public static void main(String[] args) 
	{
		System.out.println("Hello Java!");
		System.out.println("안녕하세요? 반갑습니다. ~~^^"); //()는 메소드이거나 인스트럭터(생산자) 이다
		// System.out 은 모니터(콘솔화면)를 뜻한다.
		// System.out.println("안녕하세요? 반갑습니다. ~~^^"); 은 
		// 모니터(콘솔화면)에 문자열 안녕하세요? 반갑습니다. ~~^^ 을 출력해라는 말이다.
		// System.out.println("문자열"); 은 실행한 후 자동적으로 줄바꿈이 일어난다. 

		System.out.print("Hi Java"); // 줄바꿈이 없다
		System.out.print("열심히 합시다.");
		// System.out.print("문자열"); 은 실행한 후 자동 줄바꿈이 발생하지 않는다.
		System.out.print("\n나는 자바를 공부합니다.");
		// \n 이 한줄 바꿈을 말한다.

		System.out.print("\nThe End~~\n");
		System.out.print("안녕히 가세요~~");

//		System.out.print("\n");
		System.out.println("");// \n과 "" 는 동일하게 한줄 바꿈을 의미한다.

		System.out.println(new Date());
		// 현재날짜를 나타내어 본다.
		// new Date()가 현재 시스템의 날짜시간을 얻어오는 것이다.

	}
}
-------------------------------------------------------------------------------------------
2. 2일차 Escape

/*
	Escape 문자 ==> 제어문자
	-- 인쇄할 수 없거나 키보드로 표현할 수 없는 특별한 문자를 가리키며,
	   역슬래쉬(\)와 한개의 문자를 결합하여 작성한다.

	   \n ==> 개행. 스크린(화면) 커서의 위치를 다음 줄의 처음으로 옮긴다.
	   \t ==> 수평탭. 스크린(화면) 커서의 다음 탭으로 옮긴다.
	   \r ==> 캐리지 리턴. 스크린(화면) 커서의 위치를 현재 줄의 처음으로 옮긴다. 개행하지는 않는다. 이 기호 다음에 오는 문자를 덮어 씌운다.
	   \\ ==> 역슬래쉬를 출력할때 사용한다.
	   \" ==> 큰 따옴표 출력할때 사용한다.
	   \' ==> 작은 따옴표 촐력할때 사용한다.

*/






public class Escape
{
	public static void main(String[] args) 
	{
		System.out.print("--- Escape 문자 ---");

		System.out.println("\n국어\t영어\t수학"); //println은 문자열의 뒷부분의 줄바꿈을 해준다
		System.out.println("-------------------");
		System.out.println("99\t88\t77");

		System.out.println("");

		System.out.println("이번엔 캐리지 리턴을 써볼까요?\r두");		
		System.out.println("이번엔 캐리지 리턴을 써볼까요?\rA");

		System.out.print("어떻게 될까요?");
		System.out.print("안녕하세요?\r\n"); // System.out.print("안녕하세요?\r\n"); 이건 System.out.print("안녕하세요?\n"); 와 같다 = 엔터
		System.out.print("식사하셨습니까?");

		System.out.println("");
		/*
			김소월 님의 '진달래'
			"		나보기가 역겨워 가실 때에는 "
			C:\진달래.hwp
		*/

		System.out.print("김소월 님의 \'진달래\'\r\n");
		System.out.print("\"\t\t나보기가 역겨워 가실 때에는 \"\r\n");
		System.out.print("C:\\진달래.hwp\r\n");



	}
}

----------------------------------------------------------------------------------------------

3.변수의 종류

/*
		== 변수의 종류 ==

		1. 멤버변수(member 변수) -->
			1.1 클래스 변수(== static 변수)
			1.2 인스턴스 변수(instance 변수 == non static 변수)
			-- 멤버변수(member 변수) 가 사용되어지는 범위는 해당 클래스 (지금은 MyVariable 임) 내에서 어디서나 사용가능하다.

			-- 멤버변수(member 변수) 는 선언되어지는 위치는 일반적으로 해당 클래스명 바로 아래에 선언된다.

			-- 변수 선언후 값을 부여(== 변수의 초기화)하지 않더라도 자동적으로 JVM(Java Virtual Machine) 이 알아서 기본값을 부여해준다.
			   정수형(byte, short, int, long) 타입은 기본값인 0으로 초기화 되고, 실수형(float, double) 타입은 기본값인 0.0으로 초기화 되고
			   char 타입은 기본값인 ' ' 으로 초기화 되고, object 타입은 기본값인 null(존재하지 않는것) 초기화 된다.

			-- 클래스변수(static 변수) 에 접근을 하기 위해서는 객체(Object)를 생성하지 않고도 바로 클래스명.클래스변수로 접근한다.
			   클래스변수(static 변수)는 해당 클래스로 생성되어진 객체들이 공유해서 사용한다.

			-- 인스턴스변수(non static 변수) 에 접근을 하기 위해서는 객체(Object)를 생성한 후 객체명.인스턴스변수로 접근한다.
			   인스턴스변수(non static 변수)는 해당 객체에서만 사용하는 것이다.

			-- 클래스변수(static 변수)는 클래스가 실행되어질 때 생성되어지고, 인스턴스변수(non static 변수)는 객체가 생성되어질때 생성된다.

			-- 해당 프로그램이 종료하면 클래스변수(static 변수)와 인스턴스변수(non static 변수)는 더이상 쓸모없는 쓰레기(가비지)가 되므로 JVM에서
			   가비지 컬렉터가 작동하여 자동적으로 메모리에서 소멸시켜준다.

		2. 지역변수(local 변수)
			-- 지역변수(local 변수) 가 사용되어지는 범위는
			   지역변수(local 변수) 가 생성된 {   } 내에서만 사용가능하다.

			-- 지역변수(local 변수) 는 특정 메소드내에서나, 생성자(instructor)내에서 선언되어지는 것이다.

			-- 지역변수 선언되어진 {  } 을 벗어나면 자동적으로 소멸된다.

* JVM (Java Virtual Machine) 은 운영체제가 별도로 돌아가는 것
*/


public class MyVariable
{
	int a = 10; // = 은 같다가 아니라 대입한다는 뜻이다. =을 대입연산자라 부른다.
	static int b = 20; 
	//값을 줄경우 명시적 초기화라고 한다.

	int no1;
	static int no2;
	// 값을 안줄 경우 JVM 기본 초기화라고 한다

	String name1 = "한석규";
	static String name2 = "두석규";
	
	String id;
	String pwd;
	String name;
	static String address;


	public static void main(String[] args) 
	{
		int c = 30;

		MyVariable myobj = new MyVariable();
		// myobj을 클래스 MyVariable();의 객체 변수라 부른다.
		// myobj을 클래스 MyVariable();의 인스턴스(instance)라 부른다.
		// new MyVariable(); 을 객체(object)생성이라고 하고 인스턴스(instance)화 한다 라고도 한다.

		System.out.println("a :" + myobj.a);
		// "문자열" + 변수명 에서 + 는 더하기가 아니라 문자열 결합을 뜻한다. 결합연산자
		// 그러면 "문자열" + 10은 "문자열10"으로 나온다.

		//System.out.println("b :" + b);			//비권장
		//System.out.println("b :" + myobj.b);		//비권장
		System.out.println("b :" + MyVariable.b);	//권장

		System.out.println("c :" + c);

		System.out.println("\r\n==================\r\n");

		int no3 = 0; // 지역변수(local) 변수는 반드시 초기화를 해주어야 한다.

		System.out.println("no1 :" + myobj.no1);
		System.out.println("no2 :" + MyVariable.no2);
		System.out.println("no3 :" + no3);

		System.out.println("\r\n-------------------\r\n");

	 	System.out.println("name1 :" + myobj.name1);
		System.out.println("name2 :" + MyVariable.name2);

		System.out.println("\r\n==================\r\n");

		MyVariable member1 = new MyVariable();
		member1.id = "sonsm";
		member1.pwd = "qwer1234";
		member1.name = "손성민";
		MyVariable.address = "경기도 의정부시";

		MyVariable member2 = new MyVariable();
		member2.id = "kimms";
		member2.pwd = "asdf0070";
		member2.name = "김민석";
		member2.address = "서울시 강남구";

		System.out.println("=======member1=======");
		System.out.println("member1.id : " + member1.id);
		System.out.println("member1.pwd : " + member1.pwd);
		System.out.println("member1.name : " + member1.name);
		System.out.println("member1.address : " + member1.address);


		System.out.println("\r\n=======member2=======");
		System.out.println("member2.id : " + member2.id);
		System.out.println("member2.pwd : " + member2.pwd);
		System.out.println("member2.name : " + member2.name);
		System.out.println("member2.address : " + member2.address);



	}
}

4.생성자

/*
	=== 생성자(constructor) 구성하기 ===

	※ 생성자(constructor)란?
	-- 객체를 생성(클래스명 객체변수명 = new 클래스명(); ) 할때 마다 자동적으로 호출되어지는 어떠한 행위를 기술한것 이라고 생각하면 된다.

	※ 생성자(constructor)의 지켜야할 규칙
	 1. 생성자(constructor)의 이름은 반드시 클래스명과 같아야 한다.
	 2. 생성자(constructor)는 반환타입(리턴타입)을 기술하면 안된다.

	※ 생성자(constructor)의 주된 역할은 일반적으로 멤버변수(인스턴스변수, 클래스변수(static 변수) )의 초기화를 하고자 하는데 있다.

*/

public class MyConstructorTest
{
	String name;
	int age;
	String addr;

	public MyConstructorTest(){

		name = "이순신";
		age = 25;
		addr = "서울시 종로구";

		System.out.println("MyConstructorTest 객체 생성완료");
	}
	
	// 파라미터가 있는 생성자//
	public MyConstructorTest(String name, int age, String addr){ //지역 변수
		// 생성자 내에서 선언되어진 변수는 지역(local)변수 이다.
		// 멤버변수명과 지역변수명이 동일할 경우 지역변수명이 우선한다.
		// 그래서 멤버변수명과 지역변수명이 동일할 경우 구분을 짓기 위한 방법이 this.멤버변수명으로 구분한다.
		this.name = name;
		this.age = age;
		this.addr = addr; 
		
		System.out.println("파라미터가 있는 MyConstructorTest 객체 생성완료");
	}

	public static void main(String[] args) 
	{
		System.out.println("여기는 첫줄 입니다.");
		
		MyConstructorTest myobj = new MyConstructorTest(); //new MyConstructorTest()는 객체가 생성되면서 자동적으로 호출되어지는 메소드다
		
		System.out.println("myobj.name : " + myobj.name);
		System.out.println("myobj.age : " + myobj.age);
		System.out.println("myobj.addr : " + myobj.addr);

		System.out.println("");


		MyConstructorTest myobj2 = new MyConstructorTest();

		System.out.println("myobj2.name : " + myobj2.name);
		System.out.println("myobj2.age : " + myobj2.age);
		System.out.println("myobj2.addr : " + myobj2.addr);
		
		System.out.println("");

		MyConstructorTest myobj3 = new MyConstructorTest("유관순", 23, "인천광역시 부평동");
		MyConstructorTest myobj4 = new MyConstructorTest("안중근", 30, "서울시 강북구"); //매개변수(파라미터)

		System.out.println("myobj3.name : " + myobj3.name);
		System.out.println("myobj3.age : " + myobj3.age);
		System.out.println("myobj3.addr : " + myobj3.addr);
		
		System.out.println("");

		System.out.println("myobj4.name : " + myobj4.name);
		System.out.println("myobj4.age : " + myobj4.age);
		System.out.println("myobj4.addr : " + myobj4.addr);
		
		myobj.myPrint();
		myobj.myPrint();
	}
	
	public void myPrint(){
		System.out.println("안녕하세요?");
	}


}

5. 파라미터가 있는 생성자

public class MyConstructorTest2
{
	String id;
	String pwd; 
	String name;
	int age;

//	== 기본 생성자 ==
//	기본생성자는 파라미터가 있는 생성자 없을 경우 자동적으로 등록되어지지만 그러나 파라미터가 있는 생성자가 있을 경우 자동적으로 등록이 안되어진다.
//	그러므로 파라미터가 있는 생성자가 있을 경우에는 반드시 기본 생성자를 생성해주어야 한다.
	public MyConstructorTest2() {  }// 생성자를 생성하면 이와 같다


//	== 파라미터가 있는 생성자 ==
    public MyConstructorTest2(String id, String pwd, String name, int age){
	
	this.id =id;
	this.pwd =pwd;
	this.name =name;
	this.age =age;
	}


	public static void main(String[] args) 
	{
		MyConstructorTest2 myobj1 = new MyConstructorTest2();
		myobj1.id = "leess";
		myobj1.pwd = "qwer1234";
		myobj1.name = "이순신";
		myobj1.age = 25;

		System.out.println("myobj1.id : " + myobj1.id);
		System.out.println("myobj1.pwd : " + myobj1.pwd);
		System.out.println("myobj1.name : " + myobj1.name);
		System.out.println("myobj1.age : " + myobj1.age); 
		System.out.println("");

		MyConstructorTest2 myobj2 = new MyConstructorTest2("youjs", "asdf0070", "유재석", 45);

		System.out.println("myobj2.id : " + myobj2.id);
		System.out.println("myobj2.pwd : " + myobj2.pwd);
		System.out.println("myobj2.name : " + myobj2.name);
		System.out.println("myobj2.age : " + myobj2.age);
		System.out.println("");


	}
}


6. 초기화 블럭

public class InitialBlockTest
{
	String id;
	String pwd;
	String name;

	 /*	== 클래스 초기화 블럭 == 
		클래스 초기화 블럭은 해당 클래스가 메모리에 처음 로딩 되어질때 딱 1번만 실행시켜주는 것이다.
	 */
		static {
		System.out.println("!!클래스 InitialBlockTest 초기화 블럭 실행함 !!");
		}
	 /* == 인스턴스 초기화 블럭 == 
		모든 생성자에서 공통적으로 수행되어져야 할 코드가 있는 경우라면 각각의 생성자마다 중복되게 만들지(코딩하지) 말고
		인스턴스 초기화 블럭에 1번만 만들면(코딩하면) 된다.
		생성자 보다 인스턴스 초기화 블럭이 먼저 수행된다는 점을 기억하자.
		그리고 인스턴스 초기화 블럭은 객체가 생성되어질때마다 실행된다는것이다.
	 */
 	{
		System.out.println("클래스 InitialBlockTest의 객체 생성 완료"); 
		} 
	

	public InitialBlockTest() {
	//	System.out.println("클래스 InitialBlockTest의 객체 생성 완료");
		System.out.println("기본 생성자로 생성함");
	}

	public InitialBlockTest(String id, String pwd, String name){

		this.id = id;
		this.pwd = pwd;
		this.name = name;

	//	System.out.println("클래스 InitialBlockTest의 객체 생성 완료");
		System.out.println("파라미터가 있는 생성자로 생성함");

	}
	public static void main(String[] args) 
	{
	
		InitialBlockTest obj1 = new InitialBlockTest();
		obj1.id = "leess";
		obj1.pwd = "qwer1234";
		obj1.name = "이순신";
		
		System.out.println("");
		InitialBlockTest obj2 = new InitialBlockTest("kanghd", "asdf0070","강호동");
	
	//	System.out.println("헤헤헤");
	}
}

7. 인스턴스 초기화 순서

// 인스턴스 변수의 초기화 순서
// JVM 기본값 => 명시적 초기화 => 인스턴스 초기화 블럭 => 파라미터가 있는 생성자



public class InitialBlockTest2
{	
	String id = "leess";
	String name = "이순신";
	int age = 27;
	
	// 인스턴스 초기화 블럭
	{ id = "youjs";
	name = "유재석";
	age = 30 ;
	}
	public InitialBlockTest2(){  }

    public InitialBlockTest2(String id, String name, int age){

	this.id = id;
	this.name = name;
	this.age = age;

	}
	public static void main(String[] args) 
	{
		InitialBlockTest2 obj = new InitialBlockTest2();
		System.out.println("id : " + obj.id + ", name : " + obj.name + ", age : " + obj.age);

		System.out.println("");

		InitialBlockTest2 obj2 = new InitialBlockTest2("iyou", "아이유", 27);
		System.out.println("id : " + obj2.id + ", name : " + obj2.name + ", age : " + obj2.age);


	}
}
==============================================================================================================
메소드

1. 클래스를 이용한 메소드 호출
//동일한 경로에 있을 경우 import를 할 필요가 없다 다른 경로의 클래스 파일이 있으면 import시켜줘야된다.
public class VoidMethodTestMain
{

	public static void main(String[] args) 
	{
		Member member1 = new Member("kangkc", "qwer1234", "감강찬", 34, 178.9);
		Member member2 = new Member("suji", "asdf0070", "수지", 29, 188.2);
		
		member1.infoPrint();
		//메소드는 클래스명과 달라야 하며 첫글자는 소문자이다.

		System.out.println("");

		member2.infoPrint(); //행위에 대한 호출 member2에 있는 값을 Meber 클래스 안에 있는 infoPrint() 메소드 안에있는 내용을 실행

		
	}
}

2. Member class 메소드
public class Member
{
	String userid;
	String passwd;
	String name;
	int age;
	double height;
	
	public Member(){ }

	public Member(String userid, String passwd, String name, int age, double height){
		this.userid = userid;
		this.passwd = passwd;
		this.name = name;
		this.age = age;
		this.height = height;

	
	}

	// 메소드 정의
	public void infoPrint(){ //void 리턴타입이 없다.
		System.out.println("아이디: " + userid);
		System.out.println("암 호: " + passwd);
		System.out.println("성 명: " + name);
		System.out.println("나 이: " + age + "세");
		System.out.println("신장: " + height + "cm");
	}
}

